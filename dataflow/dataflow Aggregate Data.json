{
	"name": "dataflow Aggregate Data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_NYC_Payroll_Data",
						"type": "DatasetReference"
					},
					"name": "sourcePayrollData"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_nycpayroll_nycpayroll_history",
						"type": "DatasetReference"
					},
					"name": "sourcePayrollHistoryData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adls_nycpayroll_synapse",
						"type": "DatasetReference"
					},
					"name": "sinkPayrollSummary"
				}
			],
			"transformations": [
				{
					"name": "unionSources"
				},
				{
					"name": "filterByFiscalYear"
				},
				{
					"name": "SumTotalPaid"
				},
				{
					"name": "derivedTotalPaid",
					"description": "Creating column TotalPaid"
				}
			],
			"scriptLines": [
				"parameters{",
				"     FiscalYear as integer",
				"}",
				"source(output(",
				"          FiscalYear as string,",
				"          PayrollNumber as string,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as string,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as string,",
				"          PayBasis as string,",
				"          RegularHours as string,",
				"          RegularGrossPaid as string,",
				"          OTHours as string,",
				"          TotalOTPaid as string,",
				"          TotalOtherPay as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcePayrollData",
				"source(output(",
				"          FiscalYear as string,",
				"          PayrollNumber as string,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as string,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as string,",
				"          PayBasis as string,",
				"          RegularHours as string,",
				"          RegularGrossPaid as string,",
				"          OTHours as string,",
				"          TotalOTPaid as string,",
				"          TotalOtherPay as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcePayrollHistoryData",
				"sourcePayrollData, sourcePayrollHistoryData union(byName: true)~> unionSources",
				"unionSources filter(toInteger(FiscalYear) >= $FiscalYear) ~> filterByFiscalYear",
				"derivedTotalPaid aggregate(groupBy(AgencyName,",
				"          FiscalYear),",
				"     TotalPaid = sum(TotalPaid)) ~> SumTotalPaid",
				"filterByFiscalYear derive(TotalPaid = toFloat(RegularGrossPaid) + toFloat(TotalOTPaid) + toFloat(TotalOtherPay)) ~> derivedTotalPaid",
				"SumTotalPaid sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['NYC_Payroll_Summary.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          AgencyName,",
				"          FiscalYear,",
				"          TotalPaid",
				"     ),",
				"     partitionBy('hash', 1)) ~> sinkPayrollSummary"
			]
		}
	}
}